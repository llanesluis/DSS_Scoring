@page "/Pages/Matriz"

@using DSS_Scoring.Shared.DTOs
@inject HttpClient Http

<PageTitle>Tabla Dinámica</PageTitle>

<!-- Lista desplegable para seleccionar el proyecto -->
<div>
    <label for="proyectoSelect">Seleccione un Proyecto:</label>
    <select id="proyectoSelect" @onchange="(e) => OnProyectoSeleccionado(((ChangeEventArgs)e).Value?.ToString())">
        <option value="">Seleccione un Proyecto</option>
        @foreach (var proyecto in Proyectos)
        {
            <option value="@proyecto.Id">@proyecto.Nombre</option>
        }
    </select>
</div>

@if (ProyectoSeleccionado != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Criterio</th>
                <th>Peso</th>
                @foreach (var alternativa in Alternativas)
                {
                    <th>@alternativa.Nombre</th>
                }
                <th>    </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var criterio in Criterios)
            {
                <tr>
                    <td>@criterio.Nombre</td>
                    <td>@criterio.Peso</td>
                    @foreach (var alternativa in Alternativas)
                    {
                        <td>
                            <!-- Input para cada celda con patrón de validación -->
                            <input type="text" value="@GetValor(criterio.Id, alternativa.Id)"
                                   pattern="[1-9]"
                                   title="Por favor, ingrese un número entre 1 y 9"
                                   @oninput="(e) => UpdateTempValor(criterio.Id, alternativa.Id, ((ChangeEventArgs)e).Value?.ToString() ?? string.Empty)" />
                        </td>
                    }
                    <td>
                        <!-- Botón para actualizar la fila -->
                        <button @onclick="() => GuardarValoresFila(criterio.Id)">Guardar Fila</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // Listas que contendrán los datos de proyectos, criterios y alternativas
    private List<ProyectoDTO> Proyectos { get; set; } = new();
    private List<CriterioDTO> Criterios { get; set; } = new();
    private List<AlternativaDTO> Alternativas { get; set; } = new();
    private List<MatrizDTO> Matriz1 { get; set; } = new(); // Matriz para almacenar valores

    // Diccionario temporal para almacenar los valores modificados
    private Dictionary<(int idCriterio, int idAlternativa), int> TempMatrizValores { get; set; } = new();

    // Proyecto seleccionado
    private ProyectoDTO? ProyectoSeleccionado { get; set; }

    // Este método se ejecuta al inicializar la página
    protected override async Task OnInitializedAsync()
    {
        await CargarProyectosAsync();
    }

    // Método para cargar los proyectos desde la API
    private async Task CargarProyectosAsync()
    {
        try
        {
            Proyectos = await Http.GetFromJsonAsync<List<ProyectoDTO>>("api/Proyectos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener Proyectos: {ex.Message}");
        }
    }

    // Método para manejar la selección de un proyecto
    private async Task OnProyectoSeleccionado(string? idProyectoStr)
    {
        if (int.TryParse(idProyectoStr, out int idProyecto))
        {
            ProyectoSeleccionado = Proyectos.FirstOrDefault(p => p.Id == idProyecto);
            if (ProyectoSeleccionado != null)
            {
                await CargarDatosProyectoAsync(idProyecto);
            }
        }
    }

    // Método para cargar los datos del proyecto seleccionado
    private async Task CargarDatosProyectoAsync(int idProyecto)
    {
        try
        {
            // Llamada para obtener las alternativas desde un endpoint específico
            var alternativasResultado = await Http.GetFromJsonAsync<List<AlternativaDTO>>($"api/Alternativas/PorIdProyecto/{idProyecto}");
            // Llamada para obtener los criterios desde otro endpoint específico
            var criteriosResultado = await Http.GetFromJsonAsync<List<CriterioDTO>>($"api/Criterios/PorIdProyecto/{idProyecto}");

            if (alternativasResultado != null)
            {
                // Asignar las alternativas obtenidas
                Alternativas = alternativasResultado;
            }
            else
            {
                Console.WriteLine("No se encontraron alternativas");
            }

            if (criteriosResultado != null)
            {
                // Asignar los criterios obtenidos
                Criterios = criteriosResultado;
            }
            else
            {
                Console.WriteLine("No se encontraron Criterios");
            }

            // Inicializar la matriz con valores por defecto (opcional)
            Matriz1 ??= new List<MatrizDTO>();  // Asegura que la lista esté inicializada antes de trabajar con ella.

            foreach (var criterio in Criterios)
            {
                foreach (var alternativa in Alternativas)
                {
                    Matriz1.Add(new MatrizDTO
                        {
                            IdProyecto = idProyecto,
                            IdAlternativa = alternativa.Id,
                            IdCriterio = criterio.Id,
                            Valor = 0 // Valor inicial, puedes cambiarlo según sea necesario
                        });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener Valores: {ex.Message}");
        }
    }

    // Método para obtener el valor de una celda en la matriz
    private int GetValor(int idCriterio, int idAlternativa)
    {
        var item = Matriz1.FirstOrDefault(m => m.IdCriterio == idCriterio && m.IdAlternativa == idAlternativa);
        return item?.Valor ?? 0;
    }

    // Método temporal para actualizar el valor en el diccionario temporal
    private void UpdateTempValor(int idCriterio, int idAlternativa, string valor)
    {
        // Validar que el valor ingresado esté entre 1 y 9
        if (int.TryParse(valor, out int intValue) && intValue >= 1 && intValue <= 9)
        {
            TempMatrizValores[(idCriterio, idAlternativa)] = intValue;
        }
    }

    // Método para guardar los valores de la fila en la matriz y enviarlos a la API
    private async Task GuardarValoresFila(int idCriterio)
    {
        var valoresParaGuardar = new List<MatrizDTO>();

        // Filtrar las alternativas que están en la fila de este criterio
        foreach (var alternativa in Alternativas)
        {
            if (TempMatrizValores.TryGetValue((idCriterio, alternativa.Id), out int valor))
            {
                // Actualizar la matriz con el nuevo valor
                var item = Matriz1.FirstOrDefault(m => m.IdCriterio == idCriterio && m.IdAlternativa == alternativa.Id);
                if (item != null)
                {
                    item.Valor = valor;
                    valoresParaGuardar.Add(item); // Agregar a la lista de valores a guardar
                }
            }
        }

        // Llamada al método para guardar los valores mediante un POST a la API
        if (valoresParaGuardar.Count > 0)
        {
            await GuardarMatrizAsync(valoresParaGuardar);
        }

        // Limpiar los valores temporales de esta fila
        foreach (var alternativa in Alternativas)
        {
            TempMatrizValores.Remove((idCriterio, alternativa.Id));
        }
    }

    // Método para enviar los datos al servidor mediante POST
    private async Task GuardarMatrizAsync(List<MatrizDTO> matrizActualizada)
    {
        var respuesta = await Http.PostAsJsonAsync("api/Matrices", matrizActualizada);

        if (respuesta.IsSuccessStatusCode)
        {
            Console.WriteLine("Valores guardados correctamente.");
        }
        else
        {
            Console.WriteLine("Error al guardar los valores.");
        }
    }
}