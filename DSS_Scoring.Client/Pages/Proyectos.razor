@page "/Pages/Proyectos"
@using System.Text
@using DSS_Scoring.Shared.DTOs
@using System.Net.Http;
@inject HttpClient HttpClient

<PageTitle>Proyectos</PageTitle>

<h3>Agregar proyecto</h3>

<div class="row">
    <div class="col-md-1">
        <label for="nombre">Nombre</label>
    </div>
    <div class="col-md-1">
        <input @bind="Name"type="text" id="nombre_text" class="form-control">
    </div>
</div>

<div class="row my-4">
    <div class="col-md-1">
        <label for="objetivo">Objectivo</label>
    </div>
    <div class="col-md-1">
        <input @bind="Objective" type="text" style="width: 300px; height: 100px;" id="objevito_text" class="form-control">
    </div>
</div>

<div class="button-row right-button">
    <button class="btn btn-primary" @onclick="UploadData"> <Icon Name="IconName.Floppy" />Guardar</button>
    <button class="btn btn-warning" @onclick="Limpiar"> <Icon Name="IconName.ArrowClockwise" />Cancelar</button>
</div>

<div>
    <h3 style="font-weight: bold; margin-top:20px;">Eliminar Alternativas</h3>
</div>
<div>
    <select name="Proyectos" id="Proyectos" Color="DropdownColor.Primary" style="margin-top: 10px;">
        @if (proyectos != null && proyectos.Any())
        {
            @foreach (var proyectos in proyectos)
            {
                <option value="@proyectos.Id">@proyectos.Nombre</option>
            }
        }
        else
        {
            <option>No hay proyectos disponibles</option>
        }
    </select>
</div>
<div>
    <button class="btn btn-danger" style="margin-top: 10px;">Eliminar Proyecto</button>
</div>

@code{

    private static string Name { get; set; }
    private static string Objective { get; set; }
    private List<ProyectoDTO> proyectos = new List<ProyectoDTO>();

    static string url = "http://localhost:5173/api/proyectos";

    public ProyectoDTO Proyecto;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            proyectos = await HttpClient.GetFromJsonAsync<List<ProyectoDTO>>("/api/proyectos") ?? new List<ProyectoDTO>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener los proyectos: {ex.Message}");
        }
    }

    async void UploadData()
    {

        using (HttpClient client = new HttpClient())
        {

            Proyecto = new ProyectoDTO
            {
                Id = 35,
                Nombre = Name,
                Objetivo = Objective
            };

            await client.PostAsJsonAsync(url, Proyecto);

        }

    }

    public void Limpiar()
    {
        Name = "";
        Objective = "";
    }

}